{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-57945",
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"state": "PUBLISHED",
		"datePublished": "2025-01-21T12:18:12.548Z",
		"dateUpdated": "2025-01-21T12:18:12.548Z",
		"dateReserved": "2025-01-19T11:50:08.380Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux",
				"dateUpdated": "2025-01-21T12:18:12.548Z"
			},
			"title": "riscv: mm: Fix the out of bound issue of vmemmap address",
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nriscv: mm: Fix the out of bound issue of vmemmap address\n\nIn sparse vmemmap model, the virtual address of vmemmap is calculated as:\n((struct page *)VMEMMAP_START - (phys_ram_base >> PAGE_SHIFT)).\nAnd the struct page's va can be calculated with an offset:\n(vmemmap + (pfn)).\n\nHowever, when initializing struct pages, kernel actually starts from the\nfirst page from the same section that phys_ram_base belongs to. If the\nfirst page's physical address is not (phys_ram_base >> PAGE_SHIFT), then\nwe get an va below VMEMMAP_START when calculating va for it's struct page.\n\nFor example, if phys_ram_base starts from 0x82000000 with pfn 0x82000, the\nfirst page in the same section is actually pfn 0x80000. During\ninit_unavailable_range(), we will initialize struct page for pfn 0x80000\nwith virtual address ((struct page *)VMEMMAP_START - 0x2000), which is\nbelow VMEMMAP_START as well as PCI_IO_END.\n\nThis commit fixes this bug by introducing a new variable\n'vmemmap_start_pfn' which is aligned with memory section size and using\nit to calculate vmemmap address instead of phys_ram_base."
				}
			],
			"affected": [
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"arch/riscv/include/asm/page.h",
						"arch/riscv/include/asm/pgtable.h",
						"arch/riscv/mm/init.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "git",
							"version": "a278d5c60f21aa15d540abb2f2da6e6d795c3e6e",
							"lessThan": "a4a7ac3d266008018f05fae53060fcb331151a14"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "a11dd49dcb9376776193e15641f84fcc1e5980c9",
							"lessThan": "d2bd51954ac8377c2f1eb1813e694788998add66"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "a11dd49dcb9376776193e15641f84fcc1e5980c9",
							"lessThan": "f754f27e98f88428aaf6be6e00f5cbce97f62d4b"
						}
					]
				},
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"arch/riscv/include/asm/page.h",
						"arch/riscv/include/asm/pgtable.h",
						"arch/riscv/mm/init.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "affected",
							"version": "6.8"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "0",
							"lessThan": "6.8"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.6.72",
							"lessThanOrEqual": "6.6.*"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.12.10",
							"lessThanOrEqual": "6.12.*"
						},
						{
							"status": "unaffected",
							"versionType": "original_commit_for_fix",
							"version": "6.13",
							"lessThanOrEqual": "*"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/a4a7ac3d266008018f05fae53060fcb331151a14"
				},
				{
					"url": "https://git.kernel.org/stable/c/d2bd51954ac8377c2f1eb1813e694788998add66"
				},
				{
					"url": "https://git.kernel.org/stable/c/f754f27e98f88428aaf6be6e00f5cbce97f62d4b"
				}
			],
			"x_generator": {
				"engine": "bippy-5f407fcff5a0"
			}
		}
	}
}
