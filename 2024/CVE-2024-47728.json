{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-47728",
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"state": "PUBLISHED",
		"datePublished": "2024-10-21T12:14:01.012Z",
		"dateUpdated": "2024-10-21T13:04:16.325Z",
		"dateReserved": "2024-09-30T16:00:12.957Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux",
				"dateUpdated": "2024-10-21T12:14:01.012Z"
			},
			"title": "bpf: Zero former ARG_PTR_TO_{LONG,INT} args in case of error",
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Zero former ARG_PTR_TO_{LONG,INT} args in case of error\n\nFor all non-tracing helpers which formerly had ARG_PTR_TO_{LONG,INT} as input\narguments, zero the value for the case of an error as otherwise it could leak\nmemory. For tracing, it is not needed given CAP_PERFMON can already read all\nkernel memory anyway hence bpf_get_func_arg() and bpf_get_func_ret() is skipped\nin here.\n\nAlso, the MTU helpers mtu_len pointer value is being written but also read.\nTechnically, the MEM_UNINIT should not be there in order to always force init.\nRemoving MEM_UNINIT needs more verifier rework though: MEM_UNINIT right now\nimplies two things actually: i) write into memory, ii) memory does not have\nto be initialized. If we lift MEM_UNINIT, it then becomes: i) read into memory,\nii) memory must be initialized. This means that for bpf_*_check_mtu() we're\nreadding the issue we're trying to fix, that is, it would then be able to\nwrite back into things like .rodata BPF maps. Follow-up work will rework the\nMEM_UNINIT semantics such that the intent can be better expressed. For now\njust clear the *mtu_len on error path which can be lifted later again."
				}
			],
			"affected": [
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"kernel/bpf/helpers.c",
						"kernel/bpf/syscall.c",
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "git",
							"version": "d7a4cb9b6705",
							"lessThan": "8397bf78988f"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "d7a4cb9b6705",
							"lessThan": "a634fa8e480a"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "d7a4cb9b6705",
							"lessThan": "599d15b6d033"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "d7a4cb9b6705",
							"lessThan": "594a9f5a8d2d"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "d7a4cb9b6705",
							"lessThan": "4b3786a6c539"
						}
					]
				},
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"kernel/bpf/helpers.c",
						"kernel/bpf/syscall.c",
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "affected",
							"version": "5.2"
						},
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "0",
							"lessThan": "5.2"
						},
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "6.1.113",
							"lessThanOrEqual": "6.1.*"
						},
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "6.6.54",
							"lessThanOrEqual": "6.6.*"
						},
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "6.10.13",
							"lessThanOrEqual": "6.10.*"
						},
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "6.11.2",
							"lessThanOrEqual": "6.11.*"
						},
						{
							"status": "unaffected",
							"versionType": "original_commit_for_fix",
							"version": "6.12-rc1",
							"lessThanOrEqual": "*"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/8397bf78988f3ae9dbebb0200189a62a57264980"
				},
				{
					"url": "https://git.kernel.org/stable/c/a634fa8e480ac2423f86311a602f6295df2c8ed0"
				},
				{
					"url": "https://git.kernel.org/stable/c/599d15b6d03356a97bff7a76155c5604c42a2962"
				},
				{
					"url": "https://git.kernel.org/stable/c/594a9f5a8d2de2573a856e506f77ba7dd2cefc6a"
				},
				{
					"url": "https://git.kernel.org/stable/c/4b3786a6c5397dc220b1483d8e2f4867743e966f"
				}
			],
			"x_generator": {
				"engine": "bippy-c9c4e1df01b2"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
					"shortName": "CISA-ADP",
					"dateUpdated": "2024-10-21T13:04:16.325Z"
				},
				"title": "CISA ADP Vulnrichment",
				"metrics": [
					{
						"other": {
							"type": "ssvc",
							"content": {
								"id": "CVE-2024-47728",
								"options": [
									{
										"Exploitation": "none"
									},
									{
										"Automatable": "no"
									},
									{
										"Technical Impact": "partial"
									}
								],
								"role": "CISA Coordinator",
								"timestamp": "2024-10-21T13:00:53.440960Z",
								"version": "2.0.3"
							}
						}
					}
				]
			}
		]
	}
}
