{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-47763",
		"assignerOrgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
		"assignerShortName": "GitHub_M",
		"state": "PUBLISHED",
		"datePublished": "2024-10-09T18:03:33.944Z",
		"dateUpdated": "2024-10-09T19:50:25.886Z",
		"dateReserved": "2024-09-30T21:28:53.231Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "a0819718-46f1-4df5-94e2-005712e83aaa",
				"shortName": "GitHub_M",
				"dateUpdated": "2024-10-09T18:03:33.944Z"
			},
			"title": "Wasmtime runtime crash when combining tail calls with trapping imports",
			"descriptions": [
				{
					"lang": "en",
					"value": "Wasmtime is an open source runtime for WebAssembly. Wasmtime's implementation of WebAssembly tail calls combined with stack traces can result in a runtime crash in certain WebAssembly modules. The runtime crash may be undefined behavior if Wasmtime was compiled with Rust 1.80 or prior. The runtime crash is a deterministic process abort when Wasmtime is compiled with Rust 1.81 and later. WebAssembly tail calls are a proposal which relatively recently reached stage 4 in the standardization process. Wasmtime first enabled support for tail calls by default in Wasmtime 21.0.0, although that release contained a bug where it was only on-by-default for some configurations. In Wasmtime 22.0.0 tail calls were enabled by default for all configurations. The specific crash happens when an exported function in a WebAssembly module (or component) performs a `return_call` (or `return_call_indirect` or `return_call_ref`) to an imported host function which captures a stack trace (for example, the host function raises a trap). In this situation, the stack-walking code previously assumed there was always at least one WebAssembly frame on the stack but with tail calls that is no longer true. With the tail-call proposal it's possible to have an entry trampoline appear as if it directly called the exit trampoline. This situation triggers an internal assert in the stack-walking code which raises a Rust `panic!()`. When Wasmtime is compiled with Rust versions 1.80 and prior this means that an `extern \"C\"` function in Rust is raising a `panic!()`. This is technically undefined behavior and typically manifests as a process abort when the unwinder fails to unwind Cranelift-generated frames. When Wasmtime is compiled with Rust versions 1.81 and later this panic becomes a deterministic process abort. Overall the impact of this issue is that this is a denial-of-service vector where a malicious WebAssembly module or component can cause the host to crash. There is no other impact at this time other than availability of a service as the result of the crash is always a crash and no more. This issue was discovered by routine fuzzing performed by the Wasmtime project via Google's OSS-Fuzz infrastructure. We have no evidence that it has ever been exploited by an attacker in the wild. All versions of Wasmtime which have tail calls enabled by default have been patched: * 21.0.x - patched in 21.0.2 * 22.0.x - patched in 22.0.1 * 23.0.x - patched in 23.0.3  * 24.0.x - patched in 24.0.1 * 25.0.x - patched in 25.0.2. Wasmtime versions from 12.0.x (the first release with experimental tail call support) to 20.0.x (the last release with tail-calls off-by-default) have support for tail calls but the support is disabled by default. These versions are not affected in their default configurations, but users who explicitly enabled tail call support will need to either disable tail call support or upgrade to a patched version of Wasmtime. The main workaround for this issue is to disable tail support for tail calls in Wasmtime, for example with `Config::wasm_tail_call(false)`. Users are otherwise encouraged to upgrade to patched versions."
				}
			],
			"affected": [
				{
					"vendor": "bytecodealliance",
					"product": "wasmtime",
					"versions": [
						{
							"status": "affected",
							"version": ">= 21.0.0, < 21.0.2"
						},
						{
							"status": "affected",
							"version": ">= 22.0.0, < 22.0.1"
						},
						{
							"status": "affected",
							"version": ">= 23.0.0, < 23.0.3"
						},
						{
							"status": "affected",
							"version": ">= 24.0.0, < 24.0.1"
						},
						{
							"status": "affected",
							"version": ">= 25.0.0, < 25.0.2"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-670: Always-Incorrect Control Flow Implementation",
							"cweId": "CWE-670"
						}
					]
				}
			],
			"metrics": [
				{
					"cvssV3_1": {
						"version": "3.1",
						"vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
						"attackVector": "LOCAL",
						"attackComplexity": "LOW",
						"privilegesRequired": "LOW",
						"userInteraction": "NONE",
						"scope": "UNCHANGED",
						"confidentialityImpact": "NONE",
						"integrityImpact": "NONE",
						"availabilityImpact": "HIGH",
						"baseScore": 5.5,
						"baseSeverity": "MEDIUM"
					}
				}
			],
			"references": [
				{
					"name": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q8hx-mm92-4wvg",
					"tags": [
						"x_refsource_CONFIRM"
					],
					"url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q8hx-mm92-4wvg"
				},
				{
					"name": "https://github.com/bytecodealliance/wasmtime/pull/8540",
					"tags": [
						"x_refsource_MISC"
					],
					"url": "https://github.com/bytecodealliance/wasmtime/pull/8540"
				},
				{
					"name": "https://github.com/bytecodealliance/wasmtime/pull/8682",
					"tags": [
						"x_refsource_MISC"
					],
					"url": "https://github.com/bytecodealliance/wasmtime/pull/8682"
				},
				{
					"name": "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_tail_call",
					"tags": [
						"x_refsource_MISC"
					],
					"url": "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_tail_call"
				},
				{
					"name": "https://github.com/WebAssembly/proposals",
					"tags": [
						"x_refsource_MISC"
					],
					"url": "https://github.com/WebAssembly/proposals"
				},
				{
					"name": "https://github.com/webassembly/tail-call",
					"tags": [
						"x_refsource_MISC"
					],
					"url": "https://github.com/webassembly/tail-call"
				}
			],
			"source": {
				"advisory": "GHSA-q8hx-mm92-4wvg",
				"discovery": "UNKNOWN"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
					"shortName": "CISA-ADP",
					"dateUpdated": "2024-10-09T19:50:25.886Z"
				},
				"title": "CISA ADP Vulnrichment",
				"metrics": [
					{
						"other": {
							"type": "ssvc",
							"content": {
								"id": "CVE-2024-47763",
								"options": [
									{
										"Exploitation": "none"
									},
									{
										"Automatable": "no"
									},
									{
										"Technical Impact": "partial"
									}
								],
								"role": "CISA Coordinator",
								"timestamp": "2024-10-09T19:47:52.888662Z",
								"version": "2.0.3"
							}
						}
					}
				]
			}
		]
	}
}
