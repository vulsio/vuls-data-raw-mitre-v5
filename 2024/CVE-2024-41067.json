{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-41067",
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"state": "PUBLISHED",
		"datePublished": "2024-07-29T14:57:28.543Z",
		"dateUpdated": "2024-08-02T04:46:52.378Z",
		"dateReserved": "2024-07-12T12:17:45.630Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux",
				"dateUpdated": "2024-07-29T14:57:28.543Z"
			},
			"title": "btrfs: scrub: handle RST lookup error correctly",
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: scrub: handle RST lookup error correctly\n\n[BUG]\nWhen running btrfs/060 with forced RST feature, it would crash the\nfollowing ASSERT() inside scrub_read_endio():\n\n\tASSERT(sector_nr < stripe->nr_sectors);\n\nBefore that, we would have tree dump from\nbtrfs_get_raid_extent_offset(), as we failed to find the RST entry for\nthe range.\n\n[CAUSE]\nInside scrub_submit_extent_sector_read() every time we allocated a new\nbbio we immediately called btrfs_map_block() to make sure there was some\nRST range covering the scrub target.\n\nBut if btrfs_map_block() fails, we immediately call endio for the bbio,\nwhile the bbio is newly allocated, it's completely empty.\n\nThen inside scrub_read_endio(), we go through the bvecs to find\nthe sector number (as bi_sector is no longer reliable if the bio is\nsubmitted to lower layers).\n\nAnd since the bio is empty, such bvecs iteration would not find any\nsector matching the sector, and return sector_nr == stripe->nr_sectors,\ntriggering the ASSERT().\n\n[FIX]\nInstead of calling btrfs_map_block() after allocating a new bbio, call\nbtrfs_map_block() first.\n\nSince our only objective of calling btrfs_map_block() is only to update\nstripe_len, there is really no need to do that after btrfs_alloc_bio().\n\nThis new timing would avoid the problem of handling empty bbio\ncompletely, and in fact fixes a possible race window for the old code,\nwhere if the submission thread is the only owner of the pending_io, the\nscrub would never finish (since we didn't decrease the pending_io\ncounter).\n\nAlthough the root cause of RST lookup failure still needs to be\naddressed."
				}
			],
			"affected": [
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"fs/btrfs/scrub.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "git",
							"version": "1da177e4c3f4",
							"lessThan": "17d1fd302a53"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "1da177e4c3f4",
							"lessThan": "2c49908634a2"
						}
					]
				},
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"fs/btrfs/scrub.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "unaffected",
							"versionType": "custom",
							"version": "6.9.11",
							"lessThanOrEqual": "6.9.*"
						},
						{
							"status": "unaffected",
							"versionType": "original_commit_for_fix",
							"version": "6.10",
							"lessThanOrEqual": "*"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/17d1fd302a53d7e456a7412da74be74a0cf63a72"
				},
				{
					"url": "https://git.kernel.org/stable/c/2c49908634a2b97b1c3abe0589be2739ac5e7fd5"
				}
			],
			"x_generator": {
				"engine": "bippy-c9c4e1df01b2"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "af854a3a-2127-422b-91ae-364da2661108",
					"shortName": "CVE",
					"dateUpdated": "2024-08-02T04:46:52.378Z"
				},
				"title": "CVE Program Container",
				"references": [
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://git.kernel.org/stable/c/17d1fd302a53d7e456a7412da74be74a0cf63a72"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://git.kernel.org/stable/c/2c49908634a2b97b1c3abe0589be2739ac5e7fd5"
					}
				]
			}
		]
	}
}
