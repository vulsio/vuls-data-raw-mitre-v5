{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"cveId": "CVE-2024-36943",
		"datePublished": "2024-05-30T15:35:42.119Z",
		"dateReserved": "2024-05-30T15:25:07.073Z",
		"dateUpdated": "2024-05-30T15:35:42.119Z",
		"state": "PUBLISHED"
	},
	"containers": {
		"cna": {
			"affected": [
				{
					"defaultStatus": "unaffected",
					"product": "Linux",
					"programFiles": [
						"fs/proc/task_mmu.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"vendor": "Linux",
					"versions": [
						{
							"lessThan": "74b3d66f91d9",
							"status": "affected",
							"version": "52526ca7fdb9",
							"versionType": "git"
						},
						{
							"lessThan": "c70dce4982ce",
							"status": "affected",
							"version": "52526ca7fdb9",
							"versionType": "git"
						}
					]
				},
				{
					"defaultStatus": "affected",
					"product": "Linux",
					"programFiles": [
						"fs/proc/task_mmu.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"vendor": "Linux",
					"versions": [
						{
							"status": "affected",
							"version": "6.7"
						},
						{
							"lessThan": "6.7",
							"status": "unaffected",
							"version": "0",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "6.8.*",
							"status": "unaffected",
							"version": "6.8.10",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "*",
							"status": "unaffected",
							"version": "6.9",
							"versionType": "original_commit_for_fix"
						}
					]
				}
			],
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);"
				}
			],
			"providerMetadata": {
				"dateUpdated": "2024-05-30T15:35:42.119Z",
				"orgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux"
			},
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/74b3d66f91d9f539f99faad74d796fa9a389a015"
				},
				{
					"url": "https://git.kernel.org/stable/c/c70dce4982ce1718bf978a35f8e26160b82081f4"
				}
			],
			"title": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan",
			"x_generator": {
				"engine": "bippy-a5840b7849dd"
			}
		}
	}
}
