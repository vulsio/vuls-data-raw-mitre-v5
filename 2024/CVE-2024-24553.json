{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-24553",
		"assignerOrgId": "455daabc-a392-441d-aa46-37d35189897c",
		"assignerShortName": "NCSC.ch",
		"state": "PUBLISHED",
		"datePublished": "2024-06-24T07:10:03.585Z",
		"dateUpdated": "2024-06-24T07:10:03.585Z",
		"dateReserved": "2024-01-25T14:02:00.526Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "455daabc-a392-441d-aa46-37d35189897c",
				"shortName": "NCSC.ch",
				"dateUpdated": "2024-06-24T07:10:03.585Z"
			},
			"title": "Bludit uses SHA1 as Password Hashing Algorithm",
			"descriptions": [
				{
					"lang": "en",
					"value": "Bludit uses the SHA-1 hashing algorithm to compute password hashes. Thus, attackers could determine cleartext passwords with brute-force attacks due to the inherent speed of SHA-1. In addition, the salt that is computed by Bludit is generated with a non-cryptographically secure function.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "Bludit uses the SHA-1 hashing algorithm to compute password hashes. Thus, attackers could determine cleartext passwords with brute-force attacks due to the inherent speed of SHA-1. In addition, the salt that is computed by Bludit is generated with a non-cryptographically secure function.<br>"
						}
					]
				}
			],
			"affected": [
				{
					"vendor": "Bludit",
					"product": "Bludit",
					"collectionURL": "https://www.bludit.com/",
					"packageName": "Bludit",
					"programFiles": [
						"bl-kernel/login.class.php",
						"bl-kernel/users.class.php"
					],
					"platforms": [
						"Linux",
						"Windows",
						"MacOS"
					],
					"repo": "https://github.com/bludit/bludit/",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"version": "2.0"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-916 Use of Password Hash With Insufficient Computational Effort",
							"cweId": "CWE-916"
						}
					]
				}
			],
			"impacts": [
				{
					"description": null,
					"capecId": "CAPEC-49"
				},
				{
					"description": null,
					"capecId": "CAPEC-16"
				},
				{
					"description": null,
					"capecId": "CAPEC-20"
				}
			],
			"metrics": [
				{
					"format": "CVSS",
					"scenarios": [
						{
							"lang": "en",
							"value": "GENERAL"
						}
					],
					"cvssV4_0": {
						"version": "4.0",
						"vectorString": "CVSS:4.0/AV:N/AC:H/AT:P/PR:H/UI:N/VC:L/VI:H/VA:N/SC:N/SI:N/SA:N",
						"baseScore": 5.9,
						"baseSeverity": "MEDIUM",
						"attackVector": "NETWORK",
						"attackComplexity": "HIGH",
						"attackRequirements": "PRESENT",
						"privilegesRequired": "HIGH",
						"userInteraction": "NONE",
						"vulnConfidentialityImpact": "LOW",
						"vulnIntegrityImpact": "HIGH",
						"vulnAvailabilityImpact": "NONE",
						"subConfidentialityImpact": "NONE",
						"subIntegrityImpact": "NONE",
						"subAvailabilityImpact": "NONE",
						"Safety": "NOT_DEFINED",
						"Automatable": "NOT_DEFINED",
						"Recovery": "NOT_DEFINED",
						"valueDensity": "NOT_DEFINED",
						"vulnerabilityResponseEffort": "NOT_DEFINED",
						"providerUrgency": "NOT_DEFINED"
					}
				}
			],
			"solutions": [
				{
					"lang": "en",
					"value": "To address this vulnerability, it is imperative that the Bludit development team transitions to a more secure and intentionally slow hashing algorithm, such as bcrypt or Argon2, for password storage. These algorithms introduce the necessary computational overhead to resist brute-force attacks effectively. In addition, it is advised that appropriate cost factors are used. \n\nFurthermore, the generation of password salts should be revamped to employ a cryptographically secure method. The current approach, utilizing the `Text::randomText function`, should be replaced with a robust random number generator provided by the operating system or a dedicated cryptographic library. This change ensures the creation of unpredictable and secure salts, enhancing the overall resilience of the password storage mechanism.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "To address this vulnerability, it is imperative that the Bludit development team transitions to a more secure and intentionally slow hashing algorithm, such as bcrypt or Argon2, for password storage. These algorithms introduce the necessary computational overhead to resist brute-force attacks effectively. In addition, it is advised that appropriate cost factors are used. <br><br>Furthermore, the generation of password salts should be revamped to employ a cryptographically secure method. The current approach, utilizing the `Text::randomText function`, should be replaced with a robust random number generator provided by the operating system or a dedicated cryptographic library. This change ensures the creation of unpredictable and secure salts, enhancing the overall resilience of the password storage mechanism."
						}
					]
				}
			],
			"references": [
				{
					"url": "https://www.redguard.ch/blog/2024/06/20/security-advisory-bludit/"
				}
			],
			"credits": [
				{
					"type": "finder",
					"lang": "en",
					"value": "Andreas Pfefferle, Redguard AG"
				}
			],
			"source": {
				"discovery": "UNKNOWN"
			},
			"datePublic": "2024-06-20T16:00:00.000Z",
			"x_generator": {
				"engine": "Vulnogram 0.2.0"
			}
		}
	}
}
