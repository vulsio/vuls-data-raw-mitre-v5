{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"cveId": "CVE-2024-36937",
		"datePublished": "2024-05-30T15:29:26.353Z",
		"dateReserved": "2024-05-30T15:25:07.071Z",
		"dateUpdated": "2024-05-30T15:29:26.353Z",
		"state": "PUBLISHED"
	},
	"containers": {
		"cna": {
			"affected": [
				{
					"defaultStatus": "unaffected",
					"product": "Linux",
					"programFiles": [
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"vendor": "Linux",
					"versions": [
						{
							"lessThan": "12481f30128f",
							"status": "affected",
							"version": "e624d4ed4aa8",
							"versionType": "git"
						},
						{
							"lessThan": "272bfb019f3c",
							"status": "affected",
							"version": "e624d4ed4aa8",
							"versionType": "git"
						},
						{
							"lessThan": "e22e25820fa0",
							"status": "affected",
							"version": "e624d4ed4aa8",
							"versionType": "git"
						},
						{
							"lessThan": "6fd81f9d333e",
							"status": "affected",
							"version": "e624d4ed4aa8",
							"versionType": "git"
						},
						{
							"lessThan": "5bcf0dcbf906",
							"status": "affected",
							"version": "e624d4ed4aa8",
							"versionType": "git"
						}
					]
				},
				{
					"defaultStatus": "affected",
					"product": "Linux",
					"programFiles": [
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"vendor": "Linux",
					"versions": [
						{
							"status": "affected",
							"version": "5.14"
						},
						{
							"lessThan": "5.14",
							"status": "unaffected",
							"version": "0",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "5.15.*",
							"status": "unaffected",
							"version": "5.15.159",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "6.1.*",
							"status": "unaffected",
							"version": "6.1.91",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "6.6.*",
							"status": "unaffected",
							"version": "6.6.31",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "6.8.*",
							"status": "unaffected",
							"version": "6.8.10",
							"versionType": "custom"
						},
						{
							"lessThanOrEqual": "*",
							"status": "unaffected",
							"version": "6.9",
							"versionType": "original_commit_for_fix"
						}
					]
				}
			],
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nxdp: use flags field to disambiguate broadcast redirect\n\nWhen redirecting a packet using XDP, the bpf_redirect_map() helper will set\nup the redirect destination information in struct bpf_redirect_info (using\nthe __bpf_xdp_redirect_map() helper function), and the xdp_do_redirect()\nfunction will read this information after the XDP program returns and pass\nthe frame on to the right redirect destination.\n\nWhen using the BPF_F_BROADCAST flag to do multicast redirect to a whole\nmap, __bpf_xdp_redirect_map() sets the 'map' pointer in struct\nbpf_redirect_info to point to the destination map to be broadcast. And\nxdp_do_redirect() reacts to the value of this map pointer to decide whether\nit's dealing with a broadcast or a single-value redirect. However, if the\ndestination map is being destroyed before xdp_do_redirect() is called, the\nmap pointer will be cleared out (by bpf_clear_redirect_map()) without\nwaiting for any XDP programs to stop running. This causes xdp_do_redirect()\nto think that the redirect was to a single target, but the target pointer\nis also NULL (since broadcast redirects don't have a single target), so\nthis causes a crash when a NULL pointer is passed to dev_map_enqueue().\n\nTo fix this, change xdp_do_redirect() to react directly to the presence of\nthe BPF_F_BROADCAST flag in the 'flags' value in struct bpf_redirect_info\nto disambiguate between a single-target and a broadcast redirect. And only\nread the 'map' pointer if the broadcast flag is set, aborting if that has\nbeen cleared out in the meantime. This prevents the crash, while keeping\nthe atomic (cmpxchg-based) clearing of the map pointer itself, and without\nadding any more checks in the non-broadcast fast path."
				}
			],
			"providerMetadata": {
				"dateUpdated": "2024-05-30T15:29:26.353Z",
				"orgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux"
			},
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/12481f30128fbebc2eeb55eb2d56390fdfa30c5e"
				},
				{
					"url": "https://git.kernel.org/stable/c/272bfb019f3cc018f654b992115774e77b4f3ffc"
				},
				{
					"url": "https://git.kernel.org/stable/c/e22e25820fa04ea5eaac4ef7ee200e9923f466a4"
				},
				{
					"url": "https://git.kernel.org/stable/c/6fd81f9d333e7b3532036577b1beb74ba1323553"
				},
				{
					"url": "https://git.kernel.org/stable/c/5bcf0dcbf9066348058b88a510c57f70f384c92c"
				}
			],
			"title": "xdp: use flags field to disambiguate broadcast redirect",
			"x_generator": {
				"engine": "bippy-a5840b7849dd"
			}
		}
	}
}
