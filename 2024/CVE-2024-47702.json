{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-47702",
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"state": "PUBLISHED",
		"datePublished": "2024-10-21T11:53:37.958Z",
		"dateUpdated": "2024-11-19T01:08:08.982Z",
		"dateReserved": "2024-09-30T16:00:12.945Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux",
				"dateUpdated": "2024-11-19T01:08:08.982Z"
			},
			"title": "bpf: Fail verification for sign-extension of packet data/data_end/data_meta",
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fail verification for sign-extension of packet data/data_end/data_meta\n\nsyzbot reported a kernel crash due to\n  commit 1f1e864b6555 (\"bpf: Handle sign-extenstin ctx member accesses\").\nThe reason is due to sign-extension of 32-bit load for\npacket data/data_end/data_meta uapi field.\n\nThe original code looks like:\n        r2 = *(s32 *)(r1 + 76) /* load __sk_buff->data */\n        r3 = *(u32 *)(r1 + 80) /* load __sk_buff->data_end */\n        r0 = r2\n        r0 += 8\n        if r3 > r0 goto +1\n        ...\nNote that __sk_buff->data load has 32-bit sign extension.\n\nAfter verification and convert_ctx_accesses(), the final asm code looks like:\n        r2 = *(u64 *)(r1 +208)\n        r2 = (s32)r2\n        r3 = *(u64 *)(r1 +80)\n        r0 = r2\n        r0 += 8\n        if r3 > r0 goto pc+1\n        ...\nNote that 'r2 = (s32)r2' may make the kernel __sk_buff->data address invalid\nwhich may cause runtime failure.\n\nCurrently, in C code, typically we have\n        void *data = (void *)(long)skb->data;\n        void *data_end = (void *)(long)skb->data_end;\n        ...\nand it will generate\n        r2 = *(u64 *)(r1 +208)\n        r3 = *(u64 *)(r1 +80)\n        r0 = r2\n        r0 += 8\n        if r3 > r0 goto pc+1\n\nIf we allow sign-extension,\n        void *data = (void *)(long)(int)skb->data;\n        void *data_end = (void *)(long)skb->data_end;\n        ...\nthe generated code looks like\n        r2 = *(u64 *)(r1 +208)\n        r2 <<= 32\n        r2 s>>= 32\n        r3 = *(u64 *)(r1 +80)\n        r0 = r2\n        r0 += 8\n        if r3 > r0 goto pc+1\nand this will cause verification failure since \"r2 <<= 32\" is not allowed\nas \"r2\" is a packet pointer.\n\nTo fix this issue for case\n  r2 = *(s32 *)(r1 + 76) /* load __sk_buff->data */\nthis patch added additional checking in is_valid_access() callback\nfunction for packet data/data_end/data_meta access. If those accesses\nare with sign-extenstion, the verification will fail.\n\n  [1] https://lore.kernel.org/bpf/000000000000c90eee061d236d37@google.com/"
				}
			],
			"affected": [
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"include/linux/bpf.h",
						"kernel/bpf/verifier.c",
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "git",
							"version": "1f1e864b6555",
							"lessThan": "f1620c93a1ec"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "1f1e864b6555",
							"lessThan": "f09757fe97a2"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "1f1e864b6555",
							"lessThan": "92de36080c93"
						}
					]
				},
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"include/linux/bpf.h",
						"kernel/bpf/verifier.c",
						"net/core/filter.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "affected",
							"version": "6.6"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "0",
							"lessThan": "6.6"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.10.13",
							"lessThanOrEqual": "6.10.*"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.11.2",
							"lessThanOrEqual": "6.11.*"
						},
						{
							"status": "unaffected",
							"versionType": "original_commit_for_fix",
							"version": "6.12",
							"lessThanOrEqual": "*"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/f1620c93a1ec950d87ef327a565d3907736d3340"
				},
				{
					"url": "https://git.kernel.org/stable/c/f09757fe97a225ae505886eac572e4cbfba96537"
				},
				{
					"url": "https://git.kernel.org/stable/c/92de36080c93296ef9005690705cba260b9bd68a"
				}
			],
			"x_generator": {
				"engine": "bippy-8e903de6a542"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
					"shortName": "CISA-ADP",
					"dateUpdated": "2024-10-21T13:14:13.443Z"
				},
				"title": "CISA ADP Vulnrichment",
				"metrics": [
					{
						"other": {
							"type": "ssvc",
							"content": {
								"id": "CVE-2024-47702",
								"options": [
									{
										"Exploitation": "none"
									},
									{
										"Automatable": "no"
									},
									{
										"Technical Impact": "partial"
									}
								],
								"role": "CISA Coordinator",
								"timestamp": "2024-10-21T13:04:24.861686Z",
								"version": "2.0.3"
							}
						}
					}
				]
			}
		]
	}
}
