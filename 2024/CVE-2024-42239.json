{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-42239",
		"assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
		"assignerShortName": "Linux",
		"state": "PUBLISHED",
		"datePublished": "2024-08-07T15:14:27.382Z",
		"dateUpdated": "2024-12-19T09:14:38.759Z",
		"dateReserved": "2024-07-30T07:40:12.253Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
				"shortName": "Linux",
				"dateUpdated": "2024-12-19T09:14:38.759Z"
			},
			"title": "bpf: Fail bpf_timer_cancel when callback is being cancelled",
			"descriptions": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fail bpf_timer_cancel when callback is being cancelled\n\nGiven a schedule:\n\ntimer1 cb\t\t\ttimer2 cb\n\nbpf_timer_cancel(timer2);\tbpf_timer_cancel(timer1);\n\nBoth bpf_timer_cancel calls would wait for the other callback to finish\nexecuting, introducing a lockup.\n\nAdd an atomic_t count named 'cancelling' in bpf_hrtimer. This keeps\ntrack of all in-flight cancellation requests for a given BPF timer.\nWhenever cancelling a BPF timer, we must check if we have outstanding\ncancellation requests, and if so, we must fail the operation with an\nerror (-EDEADLK) since cancellation is synchronous and waits for the\ncallback to finish executing. This implies that we can enter a deadlock\nsituation involving two or more timer callbacks executing in parallel\nand attempting to cancel one another.\n\nNote that we avoid incrementing the cancelling counter for the target\ntimer (the one being cancelled) if bpf_timer_cancel is not invoked from\na callback, to avoid spurious errors. The whole point of detecting\ncur->cancelling and returning -EDEADLK is to not enter a busy wait loop\n(which may or may not lead to a lockup). This does not apply in case the\ncaller is in a non-callback context, the other side can continue to\ncancel as it sees fit without running into errors.\n\nBackground on prior attempts:\n\nEarlier versions of this patch used a bool 'cancelling' bit and used the\nfollowing pattern under timer->lock to publish cancellation status.\n\nlock(t->lock);\nt->cancelling = true;\nmb();\nif (cur->cancelling)\n\treturn -EDEADLK;\nunlock(t->lock);\nhrtimer_cancel(t->timer);\nt->cancelling = false;\n\nThe store outside the critical section could overwrite a parallel\nrequests t->cancelling assignment to true, to ensure the parallely\nexecuting callback observes its cancellation status.\n\nIt would be necessary to clear this cancelling bit once hrtimer_cancel\nis done, but lack of serialization introduced races. Another option was\nexplored where bpf_timer_start would clear the bit when (re)starting the\ntimer under timer->lock. This would ensure serialized access to the\ncancelling bit, but may allow it to be cleared before in-flight\nhrtimer_cancel has finished executing, such that lockups can occur\nagain.\n\nThus, we choose an atomic counter to keep track of all outstanding\ncancellation requests and use it to prevent lockups in case callbacks\nattempt to cancel each other while executing in parallel."
				}
			],
			"affected": [
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"kernel/bpf/helpers.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "git",
							"version": "b00628b1c7d595ae5b544e059c27b1f5828314b4",
							"lessThan": "9369830518688ecd5b08ffc08ab3302ce2b5d0f7"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "b00628b1c7d595ae5b544e059c27b1f5828314b4",
							"lessThan": "3e4e8178a8666c56813bd167b848fca0f4c9af0a"
						},
						{
							"status": "affected",
							"versionType": "git",
							"version": "b00628b1c7d595ae5b544e059c27b1f5828314b4",
							"lessThan": "d4523831f07a267a943f0dde844bf8ead7495f13"
						}
					]
				},
				{
					"vendor": "Linux",
					"product": "Linux",
					"programFiles": [
						"kernel/bpf/helpers.c"
					],
					"repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "affected",
							"version": "5.15"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "0",
							"lessThan": "5.15"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.6.41",
							"lessThanOrEqual": "6.6.*"
						},
						{
							"status": "unaffected",
							"versionType": "semver",
							"version": "6.9.10",
							"lessThanOrEqual": "6.9.*"
						},
						{
							"status": "unaffected",
							"versionType": "original_commit_for_fix",
							"version": "6.10",
							"lessThanOrEqual": "*"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://git.kernel.org/stable/c/9369830518688ecd5b08ffc08ab3302ce2b5d0f7"
				},
				{
					"url": "https://git.kernel.org/stable/c/3e4e8178a8666c56813bd167b848fca0f4c9af0a"
				},
				{
					"url": "https://git.kernel.org/stable/c/d4523831f07a267a943f0dde844bf8ead7495f13"
				}
			],
			"x_generator": {
				"engine": "bippy-5f407fcff5a0"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
					"shortName": "CISA-ADP",
					"dateUpdated": "2024-09-11T17:34:31.803Z"
				},
				"title": "CISA ADP Vulnrichment",
				"metrics": [
					{
						"other": {
							"type": "ssvc",
							"content": {
								"id": "CVE-2024-42239",
								"options": [
									{
										"Exploitation": "none"
									},
									{
										"Automatable": "no"
									},
									{
										"Technical Impact": "partial"
									}
								],
								"role": "CISA Coordinator",
								"timestamp": "2024-09-10T16:13:54.505425Z",
								"version": "2.0.3"
							}
						}
					}
				]
			}
		]
	}
}
