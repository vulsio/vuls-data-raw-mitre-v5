{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2024-24550",
		"assignerOrgId": "455daabc-a392-441d-aa46-37d35189897c",
		"assignerShortName": "NCSC.ch",
		"state": "PUBLISHED",
		"datePublished": "2024-06-24T07:05:50.655Z",
		"dateUpdated": "2024-06-24T07:05:50.655Z",
		"dateReserved": "2024-01-25T14:02:00.526Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "455daabc-a392-441d-aa46-37d35189897c",
				"shortName": "NCSC.ch",
				"dateUpdated": "2024-06-24T07:05:50.655Z"
			},
			"title": "Bludit - Remote Code Execution (RCE) through File API",
			"descriptions": [
				{
					"lang": "en",
					"value": "A security vulnerability has been identified in Bludit, allowing attackers with knowledge of the API token to upload arbitrary files through the File API which leads to arbitrary code execution on the server. This vulnerability arises from improper handling of file uploads, enabling malicious actors to upload and execute PHP files.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "A security vulnerability has been identified in Bludit, allowing attackers with knowledge of the API token to upload arbitrary files through the File API which leads to arbitrary code execution on the server. This vulnerability arises from improper handling of file uploads, enabling malicious actors to upload and execute PHP files.<br>"
						}
					]
				}
			],
			"affected": [
				{
					"vendor": "Bludit",
					"product": "Bludit",
					"collectionURL": "https://www.bludit.com/",
					"packageName": "Bludit",
					"programFiles": [
						"bl-plugins/api/plugin.php"
					],
					"platforms": [
						"Linux",
						"Windows",
						"MacOS"
					],
					"repo": "https://github.com/bludit/bludit/",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"version": "3.14.0"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection')",
							"cweId": "CWE-77"
						}
					]
				},
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-502 Deserialization of Untrusted Data",
							"cweId": "CWE-502"
						}
					]
				},
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-434 Unrestricted Upload of File with Dangerous Type",
							"cweId": "CWE-434"
						}
					]
				}
			],
			"impacts": [
				{
					"description": null,
					"capecId": "CAPEC-650"
				},
				{
					"description": null,
					"capecId": "CAPEC-253"
				},
				{
					"description": null,
					"capecId": "CAPEC-242"
				},
				{
					"description": null,
					"capecId": "CAPEC-175"
				}
			],
			"metrics": [
				{
					"format": "CVSS",
					"scenarios": [
						{
							"lang": "en",
							"value": "GENERAL"
						}
					],
					"cvssV4_0": {
						"version": "4.0",
						"vectorString": "CVSS:4.0/AV:N/AC:H/AT:P/PR:H/UI:N/VC:H/VI:H/VA:H/SC:H/SI:H/SA:H",
						"baseScore": 8.9,
						"baseSeverity": "HIGH",
						"attackVector": "NETWORK",
						"attackComplexity": "HIGH",
						"attackRequirements": "PRESENT",
						"privilegesRequired": "HIGH",
						"userInteraction": "NONE",
						"vulnConfidentialityImpact": "HIGH",
						"vulnIntegrityImpact": "HIGH",
						"vulnAvailabilityImpact": "HIGH",
						"subConfidentialityImpact": "HIGH",
						"subIntegrityImpact": "HIGH",
						"subAvailabilityImpact": "HIGH",
						"Safety": "NOT_DEFINED",
						"Automatable": "NOT_DEFINED",
						"Recovery": "NOT_DEFINED",
						"valueDensity": "NOT_DEFINED",
						"vulnerabilityResponseEffort": "NOT_DEFINED",
						"providerUrgency": "NOT_DEFINED"
					}
				}
			],
			"solutions": [
				{
					"lang": "en",
					"value": "1. Remove file upload API: As the API POST request for uploading files is not documented, it can be assumed that it is a feature not actually needed by Bludit users. This is substantiated by the fact that users also cannot upload arbitrary files with the web application (AJAX).\n2. Use an allowlist: If the first suggestion is not feasible as it is an actively used feature of Bludit users, it is advised to restrict the possible upload file formats with an allowlist. Before storing the uploaded files in the intended directory, their file extension and mime type should be checked.\n3. Restrict upload storage: Users should only be allowed to store a certain amount of data on the file share (e.g. 10MB). \n4. If uploaded files should not be downloadable by everyone: Ensure that the temporary file directory is relocated outside of the web root to prevent unauthorized access.\n5. If uploaded files should be downloadable: Disable PHP in upload folder, e.g. with the following configuration in nginx:\n\n```\nlocation /upload_folder {\n    # Disable PHP execution\n    location ~ \\.php$ {\n        deny all;\n    }\n\n    # Allow other file types\n    location /upload_folder/ {\n        # Additional configurations for other file types if necessary\n    }\n}\n```",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "1. Remove file upload API: As the API POST request for uploading files is not documented, it can be assumed that it is a feature not actually needed by Bludit users. This is substantiated by the fact that users also cannot upload arbitrary files with the web application (AJAX).<br>2. Use an allowlist: If the first suggestion is not feasible as it is an actively used feature of Bludit users, it is advised to restrict the possible upload file formats with an allowlist. Before storing the uploaded files in the intended directory, their file extension and mime type should be checked.<br>3. Restrict upload storage: Users should only be allowed to store a certain amount of data on the file share (e.g. 10MB). <br>4. If uploaded files should not be downloadable by everyone: Ensure that the temporary file directory is relocated outside of the web root to prevent unauthorized access.<br>5. If uploaded files should be downloadable: Disable PHP in upload folder, e.g. with the following configuration in nginx:<br><br>```<br>location /upload_folder {<br>&nbsp; &nbsp; # Disable PHP execution<br>&nbsp; &nbsp; location ~ \\.php$ {<br>&nbsp; &nbsp; &nbsp; &nbsp; deny all;<br>&nbsp; &nbsp; }<br><br>&nbsp; &nbsp; # Allow other file types<br>&nbsp; &nbsp; location /upload_folder/ {<br>&nbsp; &nbsp; &nbsp; &nbsp; # Additional configurations for other file types if necessary<br>&nbsp; &nbsp; }<br>}<br>```"
						}
					]
				}
			],
			"configurations": [
				{
					"lang": "en",
					"value": "- Admin must enable the API (API is disabled by default).\n- Attacker requires the knowledge of the API token\n- Authentication is not required to access the file upload directory.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "- Admin must enable the API (API is disabled by default).<br>- Attacker requires the knowledge of the API token<br>- Authentication is not required to access the file upload directory.<br>"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://www.redguard.ch/blog/2024/06/20/security-advisory-bludit/"
				}
			],
			"credits": [
				{
					"type": "finder",
					"lang": "en",
					"value": "Andreas Pfefferle, Redguard AG"
				}
			],
			"source": {
				"discovery": "UNKNOWN"
			},
			"datePublic": "2024-06-20T16:00:00.000Z",
			"x_generator": {
				"engine": "Vulnogram 0.2.0"
			}
		}
	}
}
