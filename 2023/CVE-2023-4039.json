{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2023-4039",
		"assignerOrgId": "56a131ea-b967-4a0d-a41e-5f3549952846",
		"assignerShortName": "Arm",
		"state": "PUBLISHED",
		"datePublished": "2023-09-13T08:05:10.274Z",
		"dateUpdated": "2025-02-13T17:07:49.159Z",
		"dateReserved": "2023-08-01T10:38:03.032Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "56a131ea-b967-4a0d-a41e-5f3549952846",
				"shortName": "Arm",
				"dateUpdated": "2024-06-13T22:20:07.881Z"
			},
			"title": "GCC's-fstack-protector fails to guard dynamically-sized local variables on AArch64",
			"descriptions": [
				{
					"lang": "en",
					"value": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "<p>\n</p><p>**DISPUTED** A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.</p><p>The default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.</p>\n\n<p></p>"
						}
					]
				}
			],
			"affected": [
				{
					"vendor": "Arm Ltd",
					"product": "Arm GNU Toolchain",
					"defaultStatus": "affected",
					"versions": [
						{
							"status": "affected",
							"version": "All versions where option -fstack-protector is used"
						}
					]
				},
				{
					"vendor": "GNU",
					"product": "GCC",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"version": "All versions of GCC that target AArch64 when option -fstack-protector is used"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-693 Protection Mechanism Failure",
							"cweId": "CWE-693"
						}
					]
				}
			],
			"impacts": [
				{
					"descriptions": [
						{
							"lang": "en",
							"value": "CAPEC-100 Overflow Buffers"
						}
					],
					"capecId": "CAPEC-100"
				}
			],
			"metrics": [
				{
					"format": "CVSS",
					"scenarios": [
						{
							"lang": "en",
							"value": "GENERAL"
						}
					],
					"cvssV3_1": {
						"version": "3.1",
						"vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
						"attackVector": "NETWORK",
						"attackComplexity": "HIGH",
						"privilegesRequired": "NONE",
						"userInteraction": "NONE",
						"scope": "UNCHANGED",
						"confidentialityImpact": "LOW",
						"integrityImpact": "LOW",
						"availabilityImpact": "NONE",
						"baseScore": 4.8,
						"baseSeverity": "MEDIUM"
					}
				}
			],
			"solutions": [
				{
					"lang": "en",
					"value": "Recompile vulnerable code using an updated toolchain.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "Recompile vulnerable code using an updated toolchain.\n\n<br>"
						}
					]
				}
			],
			"configurations": [
				{
					"lang": "en",
					"value": "The specific conditions where the stack-protector fails to give the desired level of protection are when:\n\n\n\n      *  using GCC (all unpatched versions) targeting AArch64\n\n      *  and when the -fstack-protector option is used\n\n      *  and when the program uses C99-style dynamically-sized local variables or alloca()\n\n\n\n\nAnd to be exploitable there must also be a prior vulnerability in the\n program such that an attacker can cause a buffer overflow in these \nlocal variables that overwrites saved register values in the stack.",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "The specific conditions where the stack-protector fails to give the desired level of protection are when:\n\n\n<ul>\n    <li>using GCC (all unpatched versions) targeting AArch64</li>\n    <li>and when the -fstack-protector option is used</li>\n    <li>and when the program uses C99-style dynamically-sized local variables or alloca()</li>\n</ul>\n<p>And to be exploitable there must also be a prior vulnerability in the\n program such that an attacker can cause a buffer overflow in these \nlocal variables that overwrites saved register values in the stack.</p>\n\n<br>"
						}
					]
				}
			],
			"references": [
				{
					"url": "https://developer.arm.com/Arm%20Security%20Center/GCC%20Stack%20Protector%20Vulnerability%20AArch64"
				},
				{
					"url": "https://github.com/metaredteam/external-disclosures/security/advisories/GHSA-x7ch-h5rf-w2mf"
				}
			],
			"credits": [
				{
					"type": "finder",
					"lang": "en",
					"user": "00000000-0000-4000-9000-000000000000",
					"value": "Tom Hebb from Meta Red Team X and Maria Markstedter from Azeria Labs"
				}
			],
			"source": {
				"discovery": "EXTERNAL"
			},
			"tags": [
				"disputed"
			],
			"datePublic": "2023-09-12T09:00:00.000Z",
			"x_generator": {
				"engine": "Vulnogram 0.1.0-dev"
			},
			"x_legacyV4Record": {
				"CVE_data_meta": {
					"ASSIGNER": "arm-security@arm.com",
					"ID": "CVE-2023-4039",
					"STATE": "PUBLIC"
				},
				"affects": {
					"vendor": {
						"vendor_data": [
							{
								"product": {
									"product_data": [
										{
											"product_name": "Arm GNU Toolchain",
											"version": {
												"version_data": [
													{
														"version_value": "All versions of GCC that target AArch64 when option -fstack-protector is used"
													}
												]
											}
										}
									]
								},
								"vendor_name": "Arm Ltd"
							}
						]
					}
				},
				"data_format": "MITRE",
				"data_type": "CVE",
				"data_version": "5.0",
				"description": {
					"description_data": [
						{
							"lang": "eng",
							"value": "**DISPUTED** A failure in the -fstack-protector feature in GCC-based toolchains that target AArch64 allows an attacker to exploit an existing buffer overflow in dynamically-sized local variables in your application without this being detected. This stack-protector failure only applies to C99-style dynamically-sized local variables or those created using alloca(). The stack-protector operates as intended for statically-sized local variables. The default behavior when the stack-protector detects an overflow is to terminate your application, resulting in controlled loss of availability. An attacker who can exploit a buffer overflow without triggering the stack-protector might be able to change program flow control to cause an uncontrolled loss of availability or to go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself."
						}
					]
				},
				"problemtype": {
					"problemtype_data": [
						{
							"description": [
								{
									"lang": "eng",
									"value": "GCC's-fstack-protector fails to guard dynamically-sized local variables on AArch64"
								}
							]
						}
					]
				},
				"references": {
					"reference_data": [
						{
							"name": "https://developer.arm.com/Arm%20Security%20Center/GCC%20Stack%20Protector%20Vulnerability%20AArch64",
							"refsource": "MISC",
							"url": "https://developer.arm.com/Arm%20Security%20Center/GCC%20Stack%20Protector%20Vulnerability%20AArch64"
						}
					]
				}
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "af854a3a-2127-422b-91ae-364da2661108",
					"shortName": "CVE",
					"dateUpdated": "2024-08-02T07:17:11.837Z"
				},
				"title": "CVE Program Container",
				"references": [
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://developer.arm.com/Arm%20Security%20Center/GCC%20Stack%20Protector%20Vulnerability%20AArch64"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://github.com/metaredteam/external-disclosures/security/advisories/GHSA-x7ch-h5rf-w2mf"
					}
				]
			}
		]
	}
}
