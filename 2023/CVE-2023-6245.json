{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.1",
	"cveMetadata": {
		"cveId": "CVE-2023-6245",
		"assignerOrgId": "6b35d637-e00f-4228-858c-b20ad6e1d07b",
		"assignerShortName": "Dfinity",
		"state": "PUBLISHED",
		"datePublished": "2023-12-08T14:26:09.331Z",
		"dateUpdated": "2024-08-02T08:21:17.978Z",
		"dateReserved": "2023-11-21T16:28:51.715Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "6b35d637-e00f-4228-858c-b20ad6e1d07b",
				"shortName": "Dfinity",
				"dateUpdated": "2023-12-08T14:26:09.331Z"
			},
			"title": "Infinite decoding loop through specially crafted payload",
			"descriptions": [
				{
					"lang": "en",
					"value": "The Candid library causes a Denial of Service while \nparsing a specially crafted payload with 'empty' data type. For example,\n if the payload is `record { * ; empty }` and the canister interface expects `record { * }` then the Rust candid decoder treats empty as an extra field required by the type.  The problem with the type empty is that the candid Rust library wrongly categorizes empty as a recoverable error when skipping the field and thus causing an infinite decoding loop.\n\n\nCanisters using affected versions of candid\n are exposed to denial of service by causing the decoding to run \nindefinitely until the canister traps due to reaching maximum \ninstruction limit per execution round. Repeated exposure to the payload \nwill result in degraded performance of the canister. Note: Canisters written in Motoko are unaffected.\n\n\n\n",
					"supportingMedia": [
						{
							"type": "text/html",
							"base64": false,
							"value": "<p>The Candid library causes a Denial of Service while \nparsing a specially crafted payload with 'empty' data type. For example,\n if the payload is <code>`record { * ; empty }`</code> and the canister interface expects <code>`record { * }`</code> then the Rust candid decoder treats <code>empty</code> as an extra field required by the type.  The problem with the type <code>empty</code> is that the candid Rust library wrongly categorizes <code>empty</code> as a recoverable error when skipping the field and thus causing an infinite decoding loop.</p>\n<p>Canisters using affected versions of candid\n are exposed to denial of service by causing the decoding to run \nindefinitely until the canister traps due to reaching maximum \ninstruction limit per execution round. Repeated exposure to the payload \nwill result in degraded performance of the canister. Note: Canisters written in Motoko are unaffected.<br></p><br>"
						}
					]
				}
			],
			"affected": [
				{
					"vendor": "Internet Computer",
					"product": "Candid",
					"repo": "https://github.com/dfinity/candid",
					"defaultStatus": "unaffected",
					"versions": [
						{
							"status": "affected",
							"versionType": "0.0.0",
							"version": "0.9.0",
							"lessThan": "0.9.10"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')",
							"cweId": "CWE-835"
						}
					]
				},
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-1288 Improper Validation of Consistency within Input",
							"cweId": "CWE-1288"
						}
					]
				},
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-168 Improper Handling of Inconsistent Special Elements",
							"cweId": "CWE-168"
						}
					]
				},
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "CWE-20 Improper Input Validation",
							"cweId": "CWE-20"
						}
					]
				}
			],
			"impacts": [
				{
					"descriptions": [
						{
							"lang": "en",
							"value": "Denial of Service"
						}
					]
				}
			],
			"metrics": [
				{
					"format": "CVSS",
					"scenarios": [
						{
							"lang": "en",
							"value": "GENERAL"
						}
					],
					"cvssV3_1": {
						"version": "3.1",
						"vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
						"attackVector": "NETWORK",
						"attackComplexity": "LOW",
						"privilegesRequired": "NONE",
						"userInteraction": "NONE",
						"scope": "UNCHANGED",
						"confidentialityImpact": "NONE",
						"integrityImpact": "NONE",
						"availabilityImpact": "HIGH",
						"baseScore": 7.5,
						"baseSeverity": "HIGH"
					}
				}
			],
			"references": [
				{
					"url": "https://github.com/dfinity/candid/pull/478"
				},
				{
					"url": "https://internetcomputer.org/docs/current/references/candid-ref"
				},
				{
					"url": "https://github.com/dfinity/candid/blob/master/spec/Candid.md"
				},
				{
					"url": "https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j"
				},
				{
					"url": "https://internetcomputer.org/docs/current/references/ic-interface-spec"
				}
			],
			"source": {
				"discovery": "INTERNAL"
			},
			"datePublic": "2023-12-08T01:55:00.000Z",
			"x_generator": {
				"engine": "Vulnogram 0.1.0-dev"
			}
		},
		"adp": [
			{
				"providerMetadata": {
					"orgID": "af854a3a-2127-422b-91ae-364da2661108",
					"shortName": "CVE",
					"dateUpdated": "2024-08-02T08:21:17.978Z"
				},
				"title": "CVE Program Container",
				"references": [
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://github.com/dfinity/candid/pull/478"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://internetcomputer.org/docs/current/references/candid-ref"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://github.com/dfinity/candid/blob/master/spec/Candid.md"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j"
					},
					{
						"tags": [
							"x_transferred"
						],
						"url": "https://internetcomputer.org/docs/current/references/ic-interface-spec"
					}
				]
			}
		]
	}
}
