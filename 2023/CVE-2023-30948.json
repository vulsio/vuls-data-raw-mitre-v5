{
	"dataType": "CVE_RECORD",
	"dataVersion": "5.0",
	"cveMetadata": {
		"cveId": "CVE-2023-30948",
		"assignerOrgId": "bbcbe11d-db20-4bc2-8a6e-c79f87041fd4",
		"assignerShortName": "Palantir",
		"state": "PUBLISHED",
		"datePublished": "2023-06-06T14:12:59.240Z",
		"dateUpdated": "2023-06-06T14:12:59.240Z",
		"dateReserved": "2023-04-21T10:39:02.384Z"
	},
	"containers": {
		"cna": {
			"providerMetadata": {
				"orgID": "bbcbe11d-db20-4bc2-8a6e-c79f87041fd4",
				"shortName": "Palantir",
				"dateUpdated": "2023-06-06T14:12:59.240Z"
			},
			"title": "Retrieval of Attachments to Comments lacks Authorization",
			"descriptions": [
				{
					"lang": "en",
					"value": "A security defect in Foundry's Comments functionality resulted in the retrieval of attachments to comments not being gated by additional authorization checks. This could enable an authenticated user to inject a prior discovered attachment UUID into other arbitrary comments to discover it's content.\n\nThis defect was fixed in Foundry Comments 2.249.0, and a patch was rolled out to affected Foundry environments. No further intervention is required at this time."
				}
			],
			"affected": [
				{
					"vendor": "Palantir",
					"product": "com.palantir.comments:comments",
					"versions": [
						{
							"status": "affected",
							"versionType": "semver",
							"version": "*",
							"lessThan": "2.249.0"
						}
					]
				}
			],
			"problemTypes": [
				{
					"descriptions": [
						{
							"type": "CWE",
							"lang": "en",
							"description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
							"cweId": "CWE-285"
						}
					]
				}
			],
			"impacts": [
				{
					"descriptions": [
						{
							"lang": "en",
							"value": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example."
						}
					],
					"capecId": "CAPEC-137"
				}
			],
			"metrics": [
				{
					"format": "CVSS",
					"cvssV3_1": {
						"version": "3.1",
						"vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
						"baseScore": 6.5,
						"baseSeverity": "MEDIUM"
					}
				}
			],
			"references": [
				{
					"url": "https://palantir.safebase.us/?tcuUid=101b083b-6389-4261-98f8-23448e133a62"
				}
			],
			"source": {
				"defect": [
					"PLTRSEC-2023-16"
				],
				"discovery": "EXTERNAL"
			}
		}
	}
}
